/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package org.merscwog.app

import groovy.transform.CompileStatic
import org.codehaus.groovy.ast.ClassHelper
import org.codehaus.groovy.ast.ClassNode
import org.codehaus.groovy.control.CompilerConfiguration
import org.codehaus.groovy.control.customizers.ASTTransformationCustomizer

import java.util.regex.Pattern

import org.merscwog.sandbox.SandboxingBindingConstraints

/**
 * For now, this is the "App" class, but will need to pull out the scripting stuff to either a library or
 * within some other helper class.
 */
class App {
    private static final String SCRIPT_TEXT = '''
        println 'bob'
        println hi
        ['bob'].indices
        //System.exit(-1)
    '''

    @SuppressWarnings('Println')
    static void main(String[] args) {
        Binding binding = new Binding()
        binding.setVariable('hi', 'Hello World')
        // FIXME: Probably should have a method to add to binding and also update variableTypes

        CompilerConfiguration compilerConfig = new CompilerConfiguration()
        ASTTransformationCustomizer customizer = new ASTTransformationCustomizer(
                ['extensions': 'org.merscwog.sandbox.SandboxingTypeCheckingExtension'],
                CompileStatic)
        compilerConfig.addCompilationCustomizers(customizer)

        Map<String, ClassNode> variableTypes = ['hi': ClassHelper.STRING_TYPE]
        Set<Pattern> allowedMethods = [~/groovy\.lang\.Script#println(.*)/]
        SandboxingBindingConstraints.ACTIVE_VALUES.set(new SandboxingBindingConstraints(variableTypes, allowedMethods))
        GroovyShell shell = new GroovyShell(binding, compilerConfig)

        Script script = shell.parse(SCRIPT_TEXT)
        Object scriptResult = script.run()
        if (scriptResult) {
            println scriptResult.class
        }
    }
}
